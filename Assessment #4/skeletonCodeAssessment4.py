import random

# Sample patient database with language and preferred communication channel
patients = [
    {"id": 1, "name": "Ravi Kumar", "language": "Tamil", "channel": "SMS"},
    {"id": 2, "name": "Ananya Rao", "language": "Telugu", "channel": "WhatsApp"},
    {"id": 3, "name": "Joseph Mathew", "language": "Malayalam", "channel": "IVR"},
    {"id": 4, "name": "Rahul Sharma", "language": "Hindi", "channel": "SMS"},
    {"id": 6, "name": "Meghana R", "language": "Kannada", "channel": "SMS"},
    {"id": 5, "name": "David Thomas", "language": "English", "channel": "WhatsApp"},
]

# Predefined multi-language messages
messages = {
    "Tamil": "‡Æâ‡Æô‡Øç‡Æï‡Æ≥‡Øç ‡Æ®‡Øá‡Æ∞‡ÆÆ‡Øç ‡Æâ‡Æ±‡ØÅ‡Æ§‡Æø‡Æö‡ØÜ‡ÆØ‡Øç‡ÆØ‡Æ™‡Øç‡Æ™‡Æü‡Øç‡Æü‡Æ§‡ØÅ. ‡Æ§‡ÆØ‡Æµ‡ØÅ‡Æö‡ØÜ‡ÆØ‡Øç‡Æ§‡ØÅ ‡Æµ‡Æ∞‡ØÅ‡Æï!",
    "Telugu": "‡∞Æ‡±Ä ‡∞®‡∞ø‡∞Ø‡∞æ‡∞Æ‡∞ï‡∞Ç ‡∞®‡∞ø‡∞∞‡±ç‡∞ß‡∞æ‡∞∞‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡∞ø‡∞Ç‡∞¶‡∞ø. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞∞‡∞Ç‡∞°‡∞ø!",
    "Malayalam": "‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥Ö‡¥™‡µã‡¥Ø‡¥ø‡¥®‡µç‡¥±‡µç‡¥Æ‡µÜ‡¥®‡µç‡¥±‡µç ‡¥∏‡µç‡¥•‡¥ø‡¥∞‡µÄ‡¥ï‡¥∞‡¥ø‡¥ö‡µç‡¥ö‡¥ø‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ. ‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥µ‡¥∞‡µÇ!",
    "Hindi": "‡§Ü‡§™‡§ï‡§æ ‡§Ö‡§™‡•â‡§á‡§Ç‡§ü‡§Æ‡•á‡§Ç‡§ü ‡§ï‡§®‡•ç‡§´‡§∞‡•ç‡§Æ ‡§π‡•ã ‡§ó‡§Ø‡§æ ‡§π‡•à‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§Ü‡§è‡§Ç!",
    "Kannada": "‡≤®‡≤ø‡≤Æ‡≥ç‡≤Æ ‡≤≠‡≥á‡≤ü‡≤ø‡≤Ø‡≥Å ‡≤ñ‡≤ö‡≤ø‡≤§‡≤µ‡≤æ‡≤ó‡≤ø‡≤¶‡≥Ü. ‡≤¶‡≤Ø‡≤µ‡≤ø‡≤ü‡≥ç‡≤ü‡≥Å ‡≤Ü‡≤ó‡≤Æ‡≤ø‡≤∏‡≤ø!",
    "English": "Your appointment is confirmed. Please visit!"
}

def send_message(patient):
    """Simulate sending a message based on patient language and preferred channel"""
    language = patient["language"]
    message = messages.get(language, messages["English"])  # Default to English if language not found
    channel = patient["channel"]
    print(f"üì© Sending via {channel} to {patient['name']} ({language}): {message}")

# Simulating message sending to all patients
for patient in patients:
    send_message(patient)

# Effectiveness simulation: track confirmations
def measure_effectiveness():
    """Simulates confirmation tracking"""
    confirmed = sum(random.choices([0, 1], k=len(patients)))  # Random confirmations
    confirmation_rate = (confirmed / len(patients)) * 100
    print(f"‚úÖ Confirmation Rate: {confirmation_rate:.2f}%")

measure_effectiveness()
